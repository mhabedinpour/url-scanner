// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -package mockurlscanner -source=interface.go -destination=mock/mockurlscanner.go *
//

// Package mockurlscanner is a generated GoMock package.
package mockurlscanner

import (
	context "context"
	reflect "reflect"
	domain "scanner/pkg/domain"
	urlscanner "scanner/pkg/urlscanner"

	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
	isgomock struct{}
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Result mocks base method.
func (m *MockClient) Result(ctx context.Context, scanID string) (*domain.ScanResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result", ctx, scanID)
	ret0, _ := ret[0].(*domain.ScanResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockClientMockRecorder) Result(ctx, scanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockClient)(nil).Result), ctx, scanID)
}

// SubmitURL mocks base method.
func (m *MockClient) SubmitURL(ctx context.Context, URL string) (urlscanner.SubmitRes, urlscanner.RateLimitStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitURL", ctx, URL)
	ret0, _ := ret[0].(urlscanner.SubmitRes)
	ret1, _ := ret[1].(urlscanner.RateLimitStatus)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SubmitURL indicates an expected call of SubmitURL.
func (mr *MockClientMockRecorder) SubmitURL(ctx, URL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitURL", reflect.TypeOf((*MockClient)(nil).SubmitURL), ctx, URL)
}
