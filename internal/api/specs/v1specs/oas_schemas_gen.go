// Code generated by ogen, DO NOT EDIT.

package v1specs

import (
	"fmt"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
	"github.com/google/uuid"
)

func (s *ServerErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type BearerAuth struct {
	Token string
	Roles []string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// GetRoles returns the value of Roles.
func (s *BearerAuth) GetRoles() []string {
	return s.Roles
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// SetRoles sets the value of Roles.
func (s *BearerAuth) SetRoles(val []string) {
	s.Roles = val
}

type CreateScanBadRequest Error

func (*CreateScanBadRequest) createScanRes() {}

// Ref: #/components/schemas/CreateScanRequest
type CreateScanRequest struct {
	URL url.URL `json:"url"`
}

// GetURL returns the value of URL.
func (s *CreateScanRequest) GetURL() url.URL {
	return s.URL
}

// SetURL sets the value of URL.
func (s *CreateScanRequest) SetURL(val url.URL) {
	s.URL = val
}

type CreateScanUnauthorized Error

func (*CreateScanUnauthorized) createScanRes() {}

// DeleteScanNoContent is response for DeleteScan operation.
type DeleteScanNoContent struct{}

func (*DeleteScanNoContent) deleteScanRes() {}

type DeleteScanNotFound Error

func (*DeleteScanNotFound) deleteScanRes() {}

type DeleteScanUnauthorized Error

func (*DeleteScanUnauthorized) deleteScanRes() {}

// Ref: #/components/schemas/Error
type Error struct {
	Code    string          `json:"code"`
	Message string          `json:"message"`
	Details OptErrorDetails `json:"details"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() string {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// GetDetails returns the value of Details.
func (s *Error) GetDetails() OptErrorDetails {
	return s.Details
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val string) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

// SetDetails sets the value of Details.
func (s *Error) SetDetails(val OptErrorDetails) {
	s.Details = val
}

func (*Error) listScansRes() {}

type ErrorDetails map[string]jx.Raw

func (s *ErrorDetails) init() ErrorDetails {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

type GetScanNotFound Error

func (*GetScanNotFound) getScanRes() {}

type GetScanUnauthorized Error

func (*GetScanUnauthorized) getScanRes() {}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptErrorDetails returns new OptErrorDetails with value set to v.
func NewOptErrorDetails(v ErrorDetails) OptErrorDetails {
	return OptErrorDetails{
		Value: v,
		Set:   true,
	}
}

// OptErrorDetails is optional ErrorDetails.
type OptErrorDetails struct {
	Value ErrorDetails
	Set   bool
}

// IsSet returns true if OptErrorDetails was set.
func (o OptErrorDetails) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptErrorDetails) Reset() {
	var v ErrorDetails
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptErrorDetails) SetTo(v ErrorDetails) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptErrorDetails) Get() (v ErrorDetails, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptErrorDetails) Or(d ErrorDetails) ErrorDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsNull returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetToNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptScanStatus returns new OptScanStatus with value set to v.
func NewOptScanStatus(v ScanStatus) OptScanStatus {
	return OptScanStatus{
		Value: v,
		Set:   true,
	}
}

// OptScanStatus is optional ScanStatus.
type OptScanStatus struct {
	Value ScanStatus
	Set   bool
}

// IsSet returns true if OptScanStatus was set.
func (o OptScanStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptScanStatus) Reset() {
	var v ScanStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptScanStatus) SetTo(v ScanStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptScanStatus) Get() (v ScanStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptScanStatus) Or(d ScanStatus) ScanStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Scan
type Scan struct {
	ID        uuid.UUID   `json:"id"`
	URL       url.URL     `json:"url"`
	Status    ScanStatus  `json:"status"`
	Result    ScanResult  `json:"result"`
	Attempts  int         `json:"attempts"`
	CreatedAt time.Time   `json:"createdAt"`
	UpdatedAt OptDateTime `json:"updatedAt"`
}

// GetID returns the value of ID.
func (s *Scan) GetID() uuid.UUID {
	return s.ID
}

// GetURL returns the value of URL.
func (s *Scan) GetURL() url.URL {
	return s.URL
}

// GetStatus returns the value of Status.
func (s *Scan) GetStatus() ScanStatus {
	return s.Status
}

// GetResult returns the value of Result.
func (s *Scan) GetResult() ScanResult {
	return s.Result
}

// GetAttempts returns the value of Attempts.
func (s *Scan) GetAttempts() int {
	return s.Attempts
}

// GetCreatedAt returns the value of CreatedAt.
func (s *Scan) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *Scan) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetID sets the value of ID.
func (s *Scan) SetID(val uuid.UUID) {
	s.ID = val
}

// SetURL sets the value of URL.
func (s *Scan) SetURL(val url.URL) {
	s.URL = val
}

// SetStatus sets the value of Status.
func (s *Scan) SetStatus(val ScanStatus) {
	s.Status = val
}

// SetResult sets the value of Result.
func (s *Scan) SetResult(val ScanResult) {
	s.Result = val
}

// SetAttempts sets the value of Attempts.
func (s *Scan) SetAttempts(val int) {
	s.Attempts = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *Scan) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *Scan) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

func (*Scan) createScanRes() {}
func (*Scan) getScanRes()    {}

// Ref: #/components/schemas/ScanList
type ScanList struct {
	Items      []Scan       `json:"items"`
	NextCursor OptNilString `json:"next_cursor"`
}

// GetItems returns the value of Items.
func (s *ScanList) GetItems() []Scan {
	return s.Items
}

// GetNextCursor returns the value of NextCursor.
func (s *ScanList) GetNextCursor() OptNilString {
	return s.NextCursor
}

// SetItems sets the value of Items.
func (s *ScanList) SetItems(val []Scan) {
	s.Items = val
}

// SetNextCursor sets the value of NextCursor.
func (s *ScanList) SetNextCursor(val OptNilString) {
	s.NextCursor = val
}

func (*ScanList) listScansRes() {}

// Ref: #/components/schemas/ScanResult
type ScanResult struct {
	Page     ScanResultPage     `json:"page"`
	Verdicts ScanResultVerdicts `json:"verdicts"`
	Stats    ScanResultStats    `json:"stats"`
}

// GetPage returns the value of Page.
func (s *ScanResult) GetPage() ScanResultPage {
	return s.Page
}

// GetVerdicts returns the value of Verdicts.
func (s *ScanResult) GetVerdicts() ScanResultVerdicts {
	return s.Verdicts
}

// GetStats returns the value of Stats.
func (s *ScanResult) GetStats() ScanResultStats {
	return s.Stats
}

// SetPage sets the value of Page.
func (s *ScanResult) SetPage(val ScanResultPage) {
	s.Page = val
}

// SetVerdicts sets the value of Verdicts.
func (s *ScanResult) SetVerdicts(val ScanResultVerdicts) {
	s.Verdicts = val
}

// SetStats sets the value of Stats.
func (s *ScanResult) SetStats(val ScanResultStats) {
	s.Stats = val
}

type ScanResultPage struct {
	URL      OptURI    `json:"url"`
	Domain   OptString `json:"domain"`
	IP       OptString `json:"ip"`
	Asn      OptString `json:"asn"`
	Country  OptString `json:"country"`
	Server   OptString `json:"server"`
	Status   OptInt    `json:"status"`
	MimeType OptString `json:"mimeType"`
}

// GetURL returns the value of URL.
func (s *ScanResultPage) GetURL() OptURI {
	return s.URL
}

// GetDomain returns the value of Domain.
func (s *ScanResultPage) GetDomain() OptString {
	return s.Domain
}

// GetIP returns the value of IP.
func (s *ScanResultPage) GetIP() OptString {
	return s.IP
}

// GetAsn returns the value of Asn.
func (s *ScanResultPage) GetAsn() OptString {
	return s.Asn
}

// GetCountry returns the value of Country.
func (s *ScanResultPage) GetCountry() OptString {
	return s.Country
}

// GetServer returns the value of Server.
func (s *ScanResultPage) GetServer() OptString {
	return s.Server
}

// GetStatus returns the value of Status.
func (s *ScanResultPage) GetStatus() OptInt {
	return s.Status
}

// GetMimeType returns the value of MimeType.
func (s *ScanResultPage) GetMimeType() OptString {
	return s.MimeType
}

// SetURL sets the value of URL.
func (s *ScanResultPage) SetURL(val OptURI) {
	s.URL = val
}

// SetDomain sets the value of Domain.
func (s *ScanResultPage) SetDomain(val OptString) {
	s.Domain = val
}

// SetIP sets the value of IP.
func (s *ScanResultPage) SetIP(val OptString) {
	s.IP = val
}

// SetAsn sets the value of Asn.
func (s *ScanResultPage) SetAsn(val OptString) {
	s.Asn = val
}

// SetCountry sets the value of Country.
func (s *ScanResultPage) SetCountry(val OptString) {
	s.Country = val
}

// SetServer sets the value of Server.
func (s *ScanResultPage) SetServer(val OptString) {
	s.Server = val
}

// SetStatus sets the value of Status.
func (s *ScanResultPage) SetStatus(val OptInt) {
	s.Status = val
}

// SetMimeType sets the value of MimeType.
func (s *ScanResultPage) SetMimeType(val OptString) {
	s.MimeType = val
}

type ScanResultStats struct {
	Malicious OptInt `json:"malicious"`
}

// GetMalicious returns the value of Malicious.
func (s *ScanResultStats) GetMalicious() OptInt {
	return s.Malicious
}

// SetMalicious sets the value of Malicious.
func (s *ScanResultStats) SetMalicious(val OptInt) {
	s.Malicious = val
}

type ScanResultVerdicts struct {
	Malicious OptBool `json:"malicious"`
	Score     OptInt  `json:"score"`
}

// GetMalicious returns the value of Malicious.
func (s *ScanResultVerdicts) GetMalicious() OptBool {
	return s.Malicious
}

// GetScore returns the value of Score.
func (s *ScanResultVerdicts) GetScore() OptInt {
	return s.Score
}

// SetMalicious sets the value of Malicious.
func (s *ScanResultVerdicts) SetMalicious(val OptBool) {
	s.Malicious = val
}

// SetScore sets the value of Score.
func (s *ScanResultVerdicts) SetScore(val OptInt) {
	s.Score = val
}

// Ref: #/components/schemas/ScanStatus
type ScanStatus string

const (
	ScanStatusPENDING   ScanStatus = "PENDING"
	ScanStatusCOMPLETED ScanStatus = "COMPLETED"
	ScanStatusFAILED    ScanStatus = "FAILED"
)

// AllValues returns all ScanStatus values.
func (ScanStatus) AllValues() []ScanStatus {
	return []ScanStatus{
		ScanStatusPENDING,
		ScanStatusCOMPLETED,
		ScanStatusFAILED,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s ScanStatus) MarshalText() ([]byte, error) {
	switch s {
	case ScanStatusPENDING:
		return []byte(s), nil
	case ScanStatusCOMPLETED:
		return []byte(s), nil
	case ScanStatusFAILED:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ScanStatus) UnmarshalText(data []byte) error {
	switch ScanStatus(data) {
	case ScanStatusPENDING:
		*s = ScanStatusPENDING
		return nil
	case ScanStatusCOMPLETED:
		*s = ScanStatusCOMPLETED
		return nil
	case ScanStatusFAILED:
		*s = ScanStatusFAILED
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// ServerErrorStatusCode wraps Error with StatusCode.
type ServerErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ServerErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ServerErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ServerErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ServerErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

func (*ServerErrorStatusCode) createScanRes() {}
func (*ServerErrorStatusCode) deleteScanRes() {}
func (*ServerErrorStatusCode) getScanRes()    {}
func (*ServerErrorStatusCode) listScansRes()  {}
