// Code generated by ogen, DO NOT EDIT.

package v1specs

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateScan implements createScan operation.
	//
	// Starts an asynchronous scan for the given page URL. Returns a scan resource with status `PENDING`.
	//
	// POST /scans
	CreateScan(ctx context.Context, req *CreateScanRequest) (CreateScanRes, error)
	// DeleteScan implements deleteScan operation.
	//
	// Delete a scan.
	//
	// DELETE /scans/{id}
	DeleteScan(ctx context.Context, params DeleteScanParams) (DeleteScanRes, error)
	// GetScan implements getScan operation.
	//
	// Get a single scan.
	//
	// GET /scans/{id}
	GetScan(ctx context.Context, params GetScanParams) (GetScanRes, error)
	// ListScans implements listScans operation.
	//
	// Returns scans owned by the caller. Use `cursor` and `limit` for pagination. The response includes
	// `next_cursor` when more pages exist.
	//
	// GET /scans
	ListScans(ctx context.Context, params ListScansParams) (ListScansRes, error)
	// NewError creates *ServerErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ServerErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
