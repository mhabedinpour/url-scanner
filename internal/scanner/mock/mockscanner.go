// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -package mockscanner -source=interface.go -destination=mock/mockscanner.go *
//

// Package mockscanner is a generated GoMock package.
package mockscanner

import (
	context "context"
	reflect "reflect"
	domain "scanner/pkg/domain"
	urlscanner "scanner/pkg/urlscanner"

	gomock "go.uber.org/mock/gomock"
)

// MockScanner is a mock of Scanner interface.
type MockScanner struct {
	ctrl     *gomock.Controller
	recorder *MockScannerMockRecorder
	isgomock struct{}
}

// MockScannerMockRecorder is the mock recorder for MockScanner.
type MockScannerMockRecorder struct {
	mock *MockScanner
}

// NewMockScanner creates a new mock instance.
func NewMockScanner(ctrl *gomock.Controller) *MockScanner {
	mock := &MockScanner{ctrl: ctrl}
	mock.recorder = &MockScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScanner) EXPECT() *MockScannerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockScanner) Delete(ctx context.Context, userID domain.UserID, scanID domain.ScanID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID, scanID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockScannerMockRecorder) Delete(ctx, userID, scanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockScanner)(nil).Delete), ctx, userID, scanID)
}

// Enqueue mocks base method.
func (m *MockScanner) Enqueue(ctx context.Context, userID domain.UserID, URL string) (*domain.Scan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Enqueue", ctx, userID, URL)
	ret0, _ := ret[0].(*domain.Scan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Enqueue indicates an expected call of Enqueue.
func (mr *MockScannerMockRecorder) Enqueue(ctx, userID, URL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Enqueue", reflect.TypeOf((*MockScanner)(nil).Enqueue), ctx, userID, URL)
}

// Result mocks base method.
func (m *MockScanner) Result(ctx context.Context, userID domain.UserID, scanID domain.ScanID) (*domain.Scan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Result", ctx, userID, scanID)
	ret0, _ := ret[0].(*domain.Scan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Result indicates an expected call of Result.
func (mr *MockScannerMockRecorder) Result(ctx, userID, scanID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Result", reflect.TypeOf((*MockScanner)(nil).Result), ctx, userID, scanID)
}

// Scan mocks base method.
func (m *MockScanner) Scan(ctx context.Context, URL string) (urlscanner.RateLimitStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", ctx, URL)
	ret0, _ := ret[0].(urlscanner.RateLimitStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockScannerMockRecorder) Scan(ctx, URL any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockScanner)(nil).Scan), ctx, URL)
}

// UserScans mocks base method.
func (m *MockScanner) UserScans(ctx context.Context, userID domain.UserID, status domain.ScanStatus, cursor string, limit uint) ([]domain.Scan, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserScans", ctx, userID, status, cursor, limit)
	ret0, _ := ret[0].([]domain.Scan)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserScans indicates an expected call of UserScans.
func (mr *MockScannerMockRecorder) UserScans(ctx, userID, status, cursor, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserScans", reflect.TypeOf((*MockScanner)(nil).UserScans), ctx, userID, status, cursor, limit)
}
